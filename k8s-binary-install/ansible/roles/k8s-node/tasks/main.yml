- name: get bootstrap_token
  shell: |
    awk -F "," '{print $1}' /etc/kubernetes/token.csv
  args:
    creates: /etc/kubernetes/bootstrap-kubelet.kubeconfig
  register: bootstrap_token
  delegate_to: k8s-master01

- debug: msg="{{ bootstrap_token.stdout_lines[0] }}"
  delegate_to: k8s-master01

# 生成 bootstrap-kubelet.kubeconfig 文件
# 1.TLS Bootstrap 用于自动给 kubelet 颁发证书，生成 /etc/kubernetes/kubelet.kubeconfig 文件
# 2.node 节点启动，如果没有 /etc/kubernetes/kubelet.kubeconfig 文件，则会用 /etc/kubernetes/bootstrap-kubelet.kubeconfig
#   申请一个 /etc/kubernetes/kubelet.kubeconfig 文件，然后才启动 kubelet 进程
#   最后 kubelet 用 /etc/kubernetes/kubelet.kubeconfig 文件和 kube-apiserver 进行通信
# token-id 和 token-secret 在 bootstrap/bootstrap.secret.yaml 中
- name: generate /etc/kubernetes/bootstrap-kubelet.kubeconfig
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://{{ node_host }}:6443 --kubeconfig=bootstrap-kubelet.kubeconfig
    kubectl config set-credentials kubelet-bootstrap --token={{ bootstrap_token.stdout_lines[0] }} --kubeconfig=bootstrap-kubelet.kubeconfig
    kubectl config set-context kubelet-bootstrap@kubernetes --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=bootstrap-kubelet.kubeconfig
    kubectl config use-context kubelet-bootstrap@kubernetes --kubeconfig=bootstrap-kubelet.kubeconfig
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/bootstrap-kubelet.kubeconfig
  delegate_to: k8s-master01

- name: copy config files to k8s-nodes
  become: true
  copy:
    src: "/tmp/kubernetes/{{ item }}"
    dest: "/etc/kubernetes/{{ item }}"
    owner: root
    group: root
    mode: ugo+r,go-w
  with_items:
    - ssl/ca.pem
    - bootstrap-kubelet.kubeconfig
  delegate_to: k8s-master01