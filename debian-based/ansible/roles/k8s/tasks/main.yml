# https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
- name: Install dependencies
  become: true
  become_method: sudo
  apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl']
    update_cache: yes
    state: latest

# sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
- name: Check GPG key exists
  become: true
  get_url:
    url: https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg
    dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
    mode: '0644'

# echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
- name: SET UP THE REPOSITORY
  become: true
  become_method: sudo
  apt_repository:
    repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
    state: present
    filename: kubernetes
    update_cache: yes

# sudo apt-get install -y kubelet kubeadm kubectl
- name: Install k8s components
  become: true
  apt:
    name: ['kubeadm', 'kubelet', 'kubectl']
    update_cache: yes
    state: latest
  notify: show-kubeadm-config-images-list

- name: Hold kubelet kubectl
  become: true
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubeadm
    - kubelet
    - kubectl

- name: Fuck the Great Firewall Pull Images
  command: >
    docker pull {{item.mirror}}
  loop: "{{ gfw_images }}"

- name: Fuck the Great Firewall Tag Images
  become: true
  become_method: sudo
  command: >
    docker tag {{item.mirror}} {{item.source}}
  loop: "{{ gfw_images }}"

- name: Initial k8s Cluster
  shell: |
    sudo kubeadm reset --force
    sudo kubeadm init --pod-network-cidr 10.244.0.0/16
  args:
    chdir: /home/deploy
    creates: /etc/kubernetes/admin.conf
  when: 
    - role == "master"

# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config
- name: chmod go+r /etc/kubernetes/admin.conf
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes/admin.conf
    mode: go+r
  when: 
    - role == "master"
    
- name: copy config files to k8s-nodes
  synchronize:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/admin.conf
    times: yes
    mode: push
    recursive: no
  delegate_to: k8s-node001
  when: 
    - role == "worker"

- name: Ensure $HOME/.kube directory exists
  become: true
  ansible.builtin.file:
    path: /home/deploy/.kube
    state: directory
    owner: deploy
    group: deploy

- name: Copy /etc/kubernetes/admin.conf to $HOME/.kube/config
  become: true
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: /home/deploy/.kube/config
    owner: deploy
    group: deploy
  when: 
    - role == "master"

- name: Copy /tmp/admin.conf to $HOME/.kube/config
  become: true
  copy:
    remote_src: yes
    src: /tmp/admin.conf
    dest: /home/deploy/.kube/config
    owner: deploy
    group: deploy
  when: 
    - role == "worker"

- name: Get join command
  shell: kubeadm token create --print-join-command
  register: join_command
  when: 
    - role == "worker"

- name: Join k8s cluster
  become: true
  become_method: sudo
  command: >-
    {{ join_command.stdout_lines[0] }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  when: 
    - role == "worker"
  
# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
- name: Copy calico-etcd.yaml files to /tmp
  template:
    src: kube-flannel.yml
    dest: /tmp
  run_once: true
  delegate_to: k8s-node001

- name: kubectl apply -f /tmp/kube-flannel.yml
  shell: kubectl apply -f /tmp/kube-flannel.yml
  run_once: true
  delegate_to: k8s-node001