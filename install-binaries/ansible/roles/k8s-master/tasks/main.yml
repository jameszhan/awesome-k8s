# https://storage.googleapis.com/kubernetes-release
# https://storage.googleapis.com/kubernetes-release/release/v1.19.13/kubernetes-server-linux-amd64.tar.gz
# https://storage.googleapis.com/kubernetes-release/release/v1.20.10/kubernetes-server-linux-amd64.tar.gz
# https://storage.googleapis.com/kubernetes-release/release/v1.21.2/kubernetes-server-linux-amd64.tar.gz
# https://storage.googleapis.com/kubernetes-release/release/v1.21.4/kubernetes-server-linux-amd64.tar.gz
# https://storage.googleapis.com/kubernetes-release/release/v1.22.1/kubernetes-server-linux-amd64.tar.gz
- name: Get k8s-server binary files
  ansible.builtin.unarchive:
    src: "{{ binaries_fs }}/binaries/x86_64/kubernetes/kubernetes-server-v1.21.4-linux-amd64.tar.gz"
    dest: /tmp
    remote_src: yes

- name: get executable-files in remote /tmp/kubernetes/server/bin
  ansible.builtin.find:
    paths: "/tmp/kubernetes/server/bin"
    recurse: false
    file_type: file
    patterns: '*'
    excludes: '*.docker_tag,*.tar,kubelet,kube-proxy,kube-proxy'
  register: executable_files

- debug: msg="{{executable_files}}"

- name: copy executable-files to /usr/local/bin
  become: true
  copy:
    remote_src: yes
    src: "{{item.path}}"
    dest: "/usr/local/bin"
    mode: '755'
  loop: "{{ executable_files.files }}"

- name: ensure directory /tmp/kubernetes/ssl exists
  file:
    path: /tmp/kubernetes/ssl
    state: directory
  run_once: true
  delegate_to: localhost

- name: Copy json files to /tmp/kubernetes/ssl
  template:
    src: "templates/{{ item }}"
    dest: /tmp/kubernetes/ssl
  with_items:
    - ca-config.json
    - kube-apiserver-csr.json
    - admin-csr.json
    - kube-controller-manager-csr.json
    - kube-scheduler-csr.json
    - kube-proxy-csr.json
  run_once: true
  delegate_to: localhost

- name: Copy ca-key.pem,ca-config.json to /tmp/kubernetes/ssl
  copy:
    src: "/tmp/etcd/ssl/{{ item }}"
    dest: "/tmp/kubernetes/ssl"
  with_items:
    - ca.pem
    - ca-key.pem
  run_once: true
  delegate_to: localhost

- name: generate kube-apiserver.csr, kube-apiserver.pem, kube-apiserver-key.pem, admin.csr, admin.pem, admin-key.pem etc
  shell: |
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: /tmp/kubernetes/ssl
    creates: /tmp/kubernetes/ssl/kube-apiserver.pem
  run_once: true
  delegate_to: localhost

- name: ensure directory /etc/kubernetes/ssl exists
  become: true
  file:
    path: /etc/kubernetes/ssl
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: copy ssl to k8s-master01, k8s-master02 and k8s-master03
  become: true
  copy:
    src: "/tmp/kubernetes/ssl/{{ item }}"
    dest: /etc/kubernetes/ssl/
    owner: root
    group: root
    mode: ugo+r,go-w
  with_items:
    - admin.csr
    - admin-key.pem
    - admin.pem
    - ca-key.pem
    - ca.pem
    - kube-apiserver.csr
    - kube-apiserver-key.pem
    - kube-apiserver.pem
    - kube-controller-manager.csr
    - kube-controller-manager-key.pem
    - kube-controller-manager.pem
    - kube-scheduler.csr
    - kube-scheduler-key.pem
    - kube-scheduler.pem
    - kube-proxy.csr
    - kube-proxy-key.pem
    - kube-proxy.pem

- name: get token_random
  shell: "head -c 16 /dev/urandom | od -An -t x | tr -d ' '"
  args:
    creates: /tmp/kubernetes/token.csv
  register: token_random
  run_once: true
  delegate_to: localhost

- debug: msg="{{token_random}}"
  run_once: true
  delegate_to: localhost

- name: /etc/kubernetes/ssl/token.csv
  ansible.builtin.copy:
    dest: "/tmp/kubernetes/token.csv"
    force: false
    content: |
      {{ token_random.stdout_lines[0] }},kubelet-bootstrap,10001,"system:kubelet-bootstrap"
  run_once: true
  delegate_to: localhost

- name: copy token.csv to k8s-master01, k8s-master02 and k8s-master03
  become: true
  copy:
    src: "/tmp/kubernetes/token.csv"
    dest: "/etc/kubernetes/token.csv"
    owner: root
    group: root
    mode: ugo+r,go-w

- name: Copy kube-apiserver.conf config to /etc/kubernetes
  become: true
  template:
    src: "templates/kube-apiserver.conf"
    dest: /etc/kubernetes/

- name: Copy kube-apiserver.service to /usr/lib/systemd/system/
  become: true
  template:
    src: templates/kube-apiserver.service
    dest: /usr/lib/systemd/system/

- name: Enable service kube-apiserver and ensure it is not masked
  become: true
  ansible.builtin.systemd:
    name: kube-apiserver
    enabled: yes
    masked: no

- name: Just force systemd to reread configs
  become: true
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Make sure kube-apiserver service is running
  become: true
  ansible.builtin.systemd:
    name: kube-apiserver
    state: started

# 生成 kubernetes admin 证书，给 kubernetes 管理员使用
# 为 kubectl 客户端工具(k8s 管理员) 生成 kubeconfig 文件
#   kubectl 使用 kubeconfig 文件访问 apiserver，该文件包含了 kube-apiserver 的地址
#   和认证信息（CA 证书和客户端证书）
#
# kubectl config 参数解释
#   kubectl config set-cluster        设置一个集群项（设置集群参数）
#       --certificate-authority       验证 kube-apiserver 证书的根证书
#       --embed-cert=true             将 CA 证书和客户端证书其纳入到生成的 kubeconfig 文件中
#           否则，写入的是证书文件路径，后续拷贝 kubeconfig 到其它机器时，还需要单独拷贝整数，不方便
#       --server                      指定 kube-apiserver 的地址.
#   kubectl config set-credentials    设置一个用户项（设置客户端认证参数）
#       --client-certificate          生成的客户端证书
#       --client-key                  生成的客户端证书的私钥
#   kubectl config set-context        设置一个环境项（设置上下文参数）
#   kubectl config use-context        使用某个环境当做默认环境（设置默认上下文）
- name: generate /etc/kubernetes/ssl/kube.config
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://{{ node_host }}:6443 --kubeconfig=kube.config
    kubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=true --kubeconfig=kube.config
    kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kube.config
    kubectl config use-context kubernetes --kubeconfig=kube.config
  args:
    chdir: /etc/kubernetes/ssl
    creates: /etc/kubernetes/ssl/kube.config

- name: Ensure /home/deploy/.kube directory
  become: true
  ansible.builtin.file:
    path: /home/deploy/.kube
    state: directory
    owner: deploy
    group: deploy

- name: copy kube.config to ~/.kube/config
  become: true
  copy:
    remote_src: yes
    src: "/etc/kubernetes/ssl/kube.config"
    dest: "/home/deploy/.kube/config"
    owner: deploy
    group: deploy
    mode: u+rw,g-rwx,o-rwx

# - name: test kubectl command
#   shell: |
#     kubectl cluster-info
#     kubectl get componentstatuses
#     kubectl get all --all-namespaces
#   register: stdout

# - debug: msg="{{ stdout.stdout_lines }}"

# 生成 controller-manager 证书
# 生成 controller-manager 的 kubeconfig 文件
#   kube-controller-manager 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver
#   地址、嵌入式 CA 证书和 kube-controller-manager 证书等信息
- name: generate /etc/kubernetes/kube-controller-manager.kubeconfig
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://{{ node_host }}:6443 --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config set-credentials system:kube-controller-manager --client-certificate=/etc/kubernetes/ssl/kube-controller-manager.pem --client-key=/etc/kubernetes/ssl/kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config set-context system:kube-controller-manager --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/kube-controller-manager.kubeconfig

# 生成 scheduler 证书
# 生成 scheduler 的 kubeconfig 文件
#   kube-scheduler 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、
#   嵌入式的 CA 证书和 kube-scheduler 证书
- name: generate /etc/kubernetes/kube-scheduler.kubeconfig
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://{{ node_host }}:6443 --kubeconfig=kube-scheduler.kubeconfig
    kubectl config set-credentials system:kube-scheduler --client-certificate=/etc/kubernetes/ssl/kube-scheduler.pem --client-key=/etc/kubernetes/ssl/kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig
    kubectl config set-context system:kube-scheduler --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
    kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/kube-scheduler.kubeconfig

- name: Copy kube-controller-manager.conf and kube-scheduler.conf to /etc/kubernetes
  become: true
  template:
    src: "templates/{{ item }}"
    dest: /etc/kubernetes/
  with_items: ["kube-controller-manager.conf", "kube-scheduler.conf"]

- name: Copy kube-controller-manager.service and kube-scheduler.service to /usr/lib/systemd/system/
  become: true
  template:
    src: "templates/{{ item }}"
    dest: /usr/lib/systemd/system/
  with_items: ["kube-controller-manager.service", "kube-scheduler.service"]

- name: Enable kube-controller-manager.service and kube-scheduler.service and ensure it is not masked
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
  with_items: ["kube-controller-manager.service", "kube-scheduler.service"]

- name: Just force systemd to reread configs
  become: true
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Make sure kube-controller-manager.service and kube-scheduler.service is running
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  with_items: ["kube-controller-manager.service", "kube-scheduler.service"]


