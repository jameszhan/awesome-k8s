- name: Get k8s-server binary files
  ansible.builtin.unarchive:
    src: "{{ binaries_fs }}/binaries/x86_64/kubernetes/kubernetes-server-v1.21.4-linux-amd64.tar.gz"
    dest: /tmp
    remote_src: yes

- name: copy executable-files to /usr/local/bin
  become: true
  copy:
    remote_src: yes
    src: "/tmp/kubernetes/server/bin/{{item}}"
    dest: "/usr/local/bin"
    mode: '755'
  with_items:
    - kubelet
    - kube-proxy

- name: get bootstrap_token
  shell: |
    awk -F "," '{print $1}' /etc/kubernetes/token.csv
  args:
    creates: /etc/kubernetes/kubelet-bootstrap.kubeconfig
  register: bootstrap_token
  run_once: true
  delegate_to: k8s-master01

- debug: msg="{{ bootstrap_token.stdout_lines[0] }}"
  run_once: true
  delegate_to: k8s-master01

# 生成 kubelet-bootstrap.kubeconfig 文件
# 1.TLS Bootstrap 用于自动给 kubelet 颁发证书，生成 /etc/kubernetes/kubelet.kubeconfig 文件
# 2.node 节点启动，如果没有 /etc/kubernetes/kubelet.kubeconfig 文件，则会用 /etc/kubernetes/kubelet-bootstrap.kubeconfig
#   申请一个 /etc/kubernetes/kubelet.kubeconfig 文件，然后才启动 kubelet 进程
#   最后 kubelet 用 /etc/kubernetes/kubelet.kubeconfig 文件和 kube-apiserver 进行通信
# token-id 和 token-secret 在 bootstrap/bootstrap.secret.yaml 中
- name: generate /etc/kubernetes/kubelet-bootstrap.kubeconfig
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://{{ k8s_master01_host }}:6443 --kubeconfig=kubelet-bootstrap.kubeconfig
    kubectl config set-credentials kubelet-bootstrap --token={{ bootstrap_token.stdout_lines[0] }} --kubeconfig=kubelet-bootstrap.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfig
    kubectl config use-context default --kubeconfig=kubelet-bootstrap.kubeconfig
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/kubelet-bootstrap.kubeconfig
  run_once: true
  delegate_to: k8s-master01

- name: generate /etc/kubernetes/kube-proxy.kubeconfig
  become: true
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://{{ k8s_master01_host }}:6443 --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/kube-proxy.kubeconfig
  run_once: true
  delegate_to: k8s-master01

# 8bf35d888b038c78d3657fb72c52d986,kubelet-bootstrap,10001,"system:kubelet-bootstrap"
- name: create clusterrolebinding kubelet-bootstrap
  shell: |
    kubectl delete clusterrolebinding kubelet-bootstrap
    kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap
    kubectl create clusterrolebinding kubernetes-admin  --clusterrole=cluster-admin --user=kubernetes
  args:
    chdir: /etc/kubernetes
    creates: /etc/kubernetes/manifests
  run_once: true
  delegate_to: k8s-master01

- name: Ensure config directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: deploy
    group: deploy
    mode: go+rx
  with_items:
    - /etc/kubernetes/ssl
    - /etc/kubernetes/manifests

- name: change config files permissions
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    mode: go+r
  run_once: true
  delegate_to: k8s-master01
  with_items:
    - /etc/kubernetes/kubelet-bootstrap.kubeconfig
    - /etc/kubernetes/kube-proxy.kubeconfig

- name: copy config files to k8s-nodes
  synchronize:
    src: "{{ item }}"
    dest: "{{ item }}"
    times: yes
    mode: push
    recursive: no
  delegate_to: k8s-master01
  with_items:
    - /etc/kubernetes/ssl/ca.pem
    - /etc/kubernetes/kubelet-bootstrap.kubeconfig
    - /etc/kubernetes/kube-proxy.kubeconfig

- name: Copy kubelet.yaml and kube-proxy.yaml to /etc/kubernetes/
  template:
    src: "templates/{{ item }}"
    dest: /etc/kubernetes/
  with_items:
    - kubelet.yaml
    - kube-proxy.yaml

- name: Ensure config directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: go+rx
  with_items:
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /etc/kubernetes/ssl
    - /etc/kubernetes/manifests

- name: Copy kubelet.service to /lib/systemd/system
  become: true
  template:
    src: "templates/{{ item }}"
    dest: /lib/systemd/system
  with_items:
    - kubelet.service
    - kube-proxy.service

- name: Just force systemd to reread configs
  become: true
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable kubelet.service it is not masked
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
  with_items:
    - kubelet.service
    - kube-proxy.service

- name: Make sure kubelet.service is running
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  with_items:
    - kubelet.service
    - kube-proxy.service