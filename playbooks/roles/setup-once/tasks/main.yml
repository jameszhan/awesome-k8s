# - debug: msg="{{ ansible_pkg_mgr }}"
# - debug: msg="{{ ansible_distribution }}"
# - debug: msg="{{ ansible_distribution_major_version }}"
# - debug: msg="{{ ansible_hostname }}"
# - debug: msg="{{ ansible_interfaces }}"

- name: configure /etc/hosts
  become: true
  lineinfile:
    path: /etc/hosts
    regexp: '^{{ item.ip }}'
    line: "{{ item.ip }}\t{{ item.hostname }}"
    state: present
  loop: "{{ etc_hosts }}"

- name: load lsb_release -sc
  shell: lsb_release -sc
  register: lsb_release_sc_data

- name: load lsb_release -si
  shell: lsb_release -si
  register: lsb_release_si_data

- name: set facts
  set_fact:
    lsb_release_sc: "{{ lsb_release_sc_data.stdout_lines[0] }}"
    lsb_release_si: "{{ lsb_release_si_data.stdout_lines[0] }}"

- name: Copy ubuntu_apt_sources.list to /etc/apt/
  become: true
  shell: cp sources.list sources.list_bak
  args:
    chdir: /etc/apt/
    creates: /etc/apt/sources.list_bak
  when:
    - lsb_release_si == 'Ubuntu' or lsb_release_si == 'Debian'

- name: Copy ubuntu_apt_sources.list to /etc/apt/
  become: true
  template:
    src: templates/ubuntu_apt_sources.list
    dest: /etc/apt/sources.list
  when:
    - lsb_release_si == 'Ubuntu'
    - mirrors_url is defined
  notify: reload-apt

- name: Copy debian_apt_sources.list to /etc/apt/
  become: true
  template:
    src: templates/debian_apt_sources.list
    dest: /etc/apt/sources.list
  when:
    - lsb_release_si == 'Debian' 
    - mirrors_url is defined
  notify: reload-apt

- name: Install coreutils procps net-tools sysstat etc
  become: true
  become_method: sudo
  apt:
    name: ['coreutils', 'procps', 'libseccomp2', 'net-tools', 'sysstat', 'rsync', 'bash-completion', 'socat']
    update_cache: true
    state: present
  when: lsb_release_si == 'Ubuntu' or lsb_release_si == 'Debian'

- name: Remove ntpd via apt
  become: true
  become_method: sudo
  apt:
    name: ['ntpd']
    update_cache: true
    state: absent
  when: ansible_pkg_mgr == 'apt'

- name: Remove ntpd via yum
  become: true
  become_method: sudo
  yum:
    name: ['ntpd']
    update_cache: true
    state: absent
  when: ansible_pkg_mgr == 'yum'

- name: Install chrony via apt
  become: true
  become_method: sudo
  apt:
    name: ['chrony']
    update_cache: true
    state: present
  when: ansible_pkg_mgr == 'apt'

- name: Install chrony via yum
  become: true
  become_method: sudo
  yum:
    name: ['chrony']
    update_cache: true
    state: present
  when: ansible_pkg_mgr == 'yum'

- name: get chrony version
  become: true
  shell: chronyd --version | grep -o -E 'version\s*[0-9.]+' | awk '{print $2}'
  register: chronyd_version_data

- name: set facts for chrony version
  set_fact:
    chrony_version: "{{ chronyd_version_data.stdout_lines[0] }}"

- name: Setup timezone and ntp
  become: true
  shell: |
    timedatectl set-timezone "{{ timezone }}"
    timedatectl set-ntp true

- name: backup /etc/chrony/chrony.conf
  become: true
  shell: cp chrony.conf chrony.conf.bak
  args:
    chdir: /etc/chrony
    creates: /etc/chrony/chrony.conf.bak

- name: copy to /etc/chrony/chrony.conf
  become: true
  template:
    src: templates/chrony.conf
    dest: /etc/chrony
  notify:
    - restart-chrony
    - chronyc-makestep

- name: Enable IPVS
  become: true
  become_method: sudo
  apt:
    name: ['ipvsadm', 'ipset', 'conntrack']
    update_cache: true
    state: present
  when: lsb_release_si == 'Ubuntu' or lsb_release_si == 'Debian'

- name: Setup /etc/modules-load.d/k8s.conf
  become: true
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      ip_vs
      ip_vs_rr
      ip_vs_wrr
      ip_vs_lc
      ip_vs_wlc
      ip_vs_sh
      ip_vs_dh
      br_netfilter
      nf_conntrack

# 修改linux的内核参数，添加网桥过滤和地址转发功能
- name: Setup sysctl for k8s.conf
  become: true
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.ipv4.tcp_keepalive_time = 600
      net.ipv4.tcp_keepalive_intvl = 30
      net.ipv4.tcp_keepalive_probes = 10
  notify:
    - sysctl-system
    - sysctl-k8s

# - name: modprobe br_netfilter
#   become: true
#   shell: modprobe br_netfilter

# - name: Enable systemd-modules-load started
#   become: true
#   ansible.builtin.systemd:
#     name: systemd-modules-load.service
#     enabled: yes
#     masked: no

# - name: Start systemd-modules-load started
#   become: true
#   ansible.builtin.systemd:
#     name: systemd-modules-load.service
#     daemon_reload: yes
#     state: started

# sed -i -r "/(.*)swap(.*)swap(.*)/d" /etc/fstab
# sysctl -w vm.swappiness=0
- name: disable swap
  become: true
  lineinfile:
    path: /etc/fstab
    regexp: 'swap'
    state: absent
  notify: swapoff-a
  when: role == 'worker'

# ulimit -SHn 65535
- name: config unlimit
  become: true
  lineinfile:
    path: /etc/security/limits.conf
    regexp: '{{ item.regexp }}'
    line: "{{ item.line }}"
    state: present
  loop: "{{ ulimit_conf }}"
  notify: ulimit-shn-65535
